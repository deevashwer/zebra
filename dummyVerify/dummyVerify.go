package main

import (
	"bytes"
	"fmt"
	"io"
	"math/big"
	"os"

	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark-crypto/ecc/bn254/fr"
	"github.com/consensys/gnark/backend"
	"github.com/consensys/gnark/backend/groth16"
	"github.com/consensys/gnark/frontend"
)

var Cred_Verify = []string {
// pkCA: 2 field elements
"18788342340753272711721755088082171272749302436031309813160948849494393209006",
"15317801033473034591355885454352224087550747445977024005852860082724720788566",
// pkA: 10 field elements
"11012258702522747713653579689383494272280225011906780998298995176764409485721",
"9667641851621567576249899606007144578266052238308459011942445930214468525961",
"9585320055207189155552788032827842149995776646839284473203556331118528421236",
"12902365845090787794891171122433531865118568913589463358254823102656619994895",
"15158565641096658789713781076193759170977618494075688087347758248636936497403",
"11333313957008954399218769413510611934244111347475020888570209765040059050944",
"8435339299109597285374562670894663825710064277838406208474757412933167353242",
"16735769641465346809488117209758782114745341846876133977017972304682969738921",
"11412140918245126267891650823636437386080998867112008267601928830381644311076",
"20296533060379350676187220096223487727145755249294990057534711035979128054701",
// rtrl: 1 field element
"14210487645271340129705235287734597837008725862846520221927842762506098604533",
// pkW: 1 field element
"844431240387886899885721281395325215800678496527",
// nu = CRH(alpha, gamma): 2 field elements
"269401188052592417448355198877102866105",
"241490041003257834820948636092101868928",
// protocol name
"credVerify"}

var Batched_L1_64 = []string {
// pkCA: 2 field elements
"18788342340753272711721755088082171272749302436031309813160948849494393209006",
"15317801033473034591355885454352224087550747445977024005852860082724720788566",
// pkA: 10 field elements
"11012258702522747713653579689383494272280225011906780998298995176764409485721",
"9667641851621567576249899606007144578266052238308459011942445930214468525961",
"9585320055207189155552788032827842149995776646839284473203556331118528421236",
"12902365845090787794891171122433531865118568913589463358254823102656619994895",
"15158565641096658789713781076193759170977618494075688087347758248636936497403",
"11333313957008954399218769413510611934244111347475020888570209765040059050944",
"8435339299109597285374562670894663825710064277838406208474757412933167353242",
"16735769641465346809488117209758782114745341846876133977017972304682969738921",
"11412140918245126267891650823636437386080998867112008267601928830381644311076",
"20296533060379350676187220096223487727145755249294990057534711035979128054701",
// rtrl: 1 field element
"14210487645271340129705235287734597837008725862846520221927842762506098604533",
// H: 2 field element or 32-byte element
"204379241669943700443573071694410455111",
"218360860687179546348695035370265137344",
// protocol name
"batchVerifyL164"}

var Batched_L1_512 = []string {
// pkCA: 2 field elements
"18788342340753272711721755088082171272749302436031309813160948849494393209006",
"15317801033473034591355885454352224087550747445977024005852860082724720788566",
// pkA: 10 field elements
"11012258702522747713653579689383494272280225011906780998298995176764409485721",
"9667641851621567576249899606007144578266052238308459011942445930214468525961",
"9585320055207189155552788032827842149995776646839284473203556331118528421236",
"12902365845090787794891171122433531865118568913589463358254823102656619994895",
"15158565641096658789713781076193759170977618494075688087347758248636936497403",
"11333313957008954399218769413510611934244111347475020888570209765040059050944",
"8435339299109597285374562670894663825710064277838406208474757412933167353242",
"16735769641465346809488117209758782114745341846876133977017972304682969738921",
"11412140918245126267891650823636437386080998867112008267601928830381644311076",
"20296533060379350676187220096223487727145755249294990057534711035979128054701",
// rtrl: 1 field element
"14210487645271340129705235287734597837008725862846520221927842762506098604533",
// H: 2 field element or 32-byte element
"29469558336622203936174298939084245309",
"183032414039645200068797073215951237182",
// protocol name
"batchVerifyL1512"}

var Batched_L2_64 = []string {
// pkCA: 2 field elements
"18788342340753272711721755088082171272749302436031309813160948849494393209006",
"15317801033473034591355885454352224087550747445977024005852860082724720788566",
// pkA: 10 field elements
"11012258702522747713653579689383494272280225011906780998298995176764409485721",
"9667641851621567576249899606007144578266052238308459011942445930214468525961",
"9585320055207189155552788032827842149995776646839284473203556331118528421236",
"12902365845090787794891171122433531865118568913589463358254823102656619994895",
"15158565641096658789713781076193759170977618494075688087347758248636936497403",
"11333313957008954399218769413510611934244111347475020888570209765040059050944",
"8435339299109597285374562670894663825710064277838406208474757412933167353242",
"16735769641465346809488117209758782114745341846876133977017972304682969738921",
"11412140918245126267891650823636437386080998867112008267601928830381644311076",
"20296533060379350676187220096223487727145755249294990057534711035979128054701",
// rtrl: 1 field element
"14210487645271340129705235287734597837008725862846520221927842762506098604533",
// old state: 1 field element
"7491893684186719713028590973916525994707319732231988287629612704054431154594",
// new state: 1 field element
"7943471890914283809290419862537467067571872300327155633174334797045487951788",
// H: 2 field element or 32-byte element
"204379241669943700443573071694410455111",
"218360860687179546348695035370265137344",
// protocol name
"batchVerifyL264"}

var Batched_L2_512 = []string {
// pkCA: 2 field elements
"18788342340753272711721755088082171272749302436031309813160948849494393209006",
"15317801033473034591355885454352224087550747445977024005852860082724720788566",
// pkA: 10 field elements
"11012258702522747713653579689383494272280225011906780998298995176764409485721",
"9667641851621567576249899606007144578266052238308459011942445930214468525961",
"9585320055207189155552788032827842149995776646839284473203556331118528421236",
"12902365845090787794891171122433531865118568913589463358254823102656619994895",
"15158565641096658789713781076193759170977618494075688087347758248636936497403",
"11333313957008954399218769413510611934244111347475020888570209765040059050944",
"8435339299109597285374562670894663825710064277838406208474757412933167353242",
"16735769641465346809488117209758782114745341846876133977017972304682969738921",
"11412140918245126267891650823636437386080998867112008267601928830381644311076",
"20296533060379350676187220096223487727145755249294990057534711035979128054701",
// rtrl: 1 field element
"14210487645271340129705235287734597837008725862846520221927842762506098604533",
// old state: 1 field element
"7491893684186719713028590973916525994707319732231988287629612704054431154594",
// new state: 1 field element
"7943471890914283809290419862537467067571872300327155633174334797045487951788",
// H: 2 field element or 32-byte element
"29469558336622203936174298939084245309",
"183032414039645200068797073215951237182",
// protocol name
"batchVerifyL2512"}

var protocolAndNamesMapping = map[string][]string{
	"BatchL1-64": Batched_L1_64,
	"BatchL2-64": Batched_L2_64,
	"BatchL1-512": Batched_L1_512,
	"BatchL2-512": Batched_L2_512,
	"CredVerify": Cred_Verify,
}

var ProtocolName string = "CredVerify"
var Protocol = protocolAndNamesMapping[ProtocolName]

type DummyVerifyCircuit struct {
	Public []frontend.Variable `gnark:",public"`

	// witness
	Private []frontend.Variable
}

func (circuit *DummyVerifyCircuit) Define(api frontend.API) error {

	for i:=0; i < len(circuit.Public); i++ {
		api.AssertIsEqual(circuit.Public[i], circuit.Private[i])
	}
	return nil
}

func main() {
	var NUM_INPUTS = len(Protocol) - 1
	public := make([]fr.Element, NUM_INPUTS)
	private := make([]fr.Element, NUM_INPUTS)
	var neg_one fr.Element
	neg_one.SetInt64(-1)
	for i := 0; i < NUM_INPUTS; i++ {
		var biginput, _ = new(big.Int).SetString(Protocol[i], 10)
		public[i].SetBigInt(biginput) 
	}

	Public := make([]frontend.Variable, NUM_INPUTS)
	Private := make([]frontend.Variable, NUM_INPUTS)
	for i := 0; i < NUM_INPUTS; i++ {
		if public[i].Equal(&neg_one) {
			public[i].SetRandom()
		}
		private[i] = public[i]
		Public[i] = public[i]
		Private[i] = private[i]
	}

	assignment := DummyVerifyCircuit {
		Public: Public[:],
		Private: Private[:],
	}
    circuit := DummyVerifyCircuit {
		Public: make([]frontend.Variable, NUM_INPUTS),
		Private: make([]frontend.Variable, NUM_INPUTS),
	}
    r1cs, err := frontend.Compile(ecc.BN254, backend.GROTH16, &circuit)

    fmt.Printf("r1cs.GetNbConstraints(): %v\n", r1cs.GetNbConstraints())
    if err != nil {
        fmt.Printf("err: %v\n", err)
    }

	var pk groth16.ProvingKey
	var vk groth16.VerifyingKey
	if _, err := os.Stat(ProtocolName + ".vk"); err != nil {
		if !os.IsNotExist(err) {
			panic(err)
		}
		// generating pk, vk
		pk, vk, err = groth16.Setup(r1cs)
		if err != nil {
			panic(err)
		}
		{
			f, err := os.Create(ProtocolName + ".vk")
			if err != nil {
				panic(err)
			}
			_, err = vk.WriteRawTo(f)
			if err != nil {
				panic(err)
			}
		}
		{
			f, err := os.Create(ProtocolName + ".pk")
			if err != nil {
				panic(err)
			}
			_, err = pk.WriteRawTo(f)
			if err != nil {
				panic(err)
			}
		}
		{
			f, err := os.Create(ProtocolName + ".sol")
			if err != nil {
				panic(err)
			}
			err = vk.ExportSolidity(f)
			if err != nil {
				panic(err)
			}
		}
	} else {
		// read keys
		pk = groth16.NewProvingKey(ecc.BN254)
		{
			f, _ := os.Open(ProtocolName + ".pk")
			_, err = pk.ReadFrom(f)
			f.Close()
			if err != nil {
				fmt.Printf("err: %v\n", err)
			}
		}
		vk = groth16.NewVerifyingKey(ecc.BN254)
		{
			f, _ := os.Open(ProtocolName + ".vk")
			_, err = vk.ReadFrom(f)
			f.Close()
			if err != nil {
				fmt.Printf("err: %v\n", err)
			}
		} 
		// write the contract (overwriting if it already exists)
		{
			f, err := os.Create(ProtocolName + ".sol")
			if err != nil {
				panic(err)
			}
			err = vk.ExportSolidity(f)
			if err != nil {
				panic(err)
			}
		}
	}
	
    witness, err := frontend.NewWitness(&assignment, ecc.BN254)
	if err != nil {
		fmt.Printf("New witness err: %v\n", err)
	}
    publicWitness, err := witness.Public()
	if err != nil {
		fmt.Printf("Public witness err: %v\n", err)
	}
	// writing public witness
	fw, err := os.Create(ProtocolName + ".witness")
	if err != nil {
		fmt.Printf("err: %v\n", err)
	}
	mwf := io.MultiWriter(os.Stdout, fw)
	fmt.Fprintf(mwf, "%v\n", publicWitness)
    groth_proof, err := groth16.Prove(r1cs, pk, witness)
 
	if err != nil {
		fmt.Printf("Prove err: %v\n", err)
	}
	{
		const fpSize = 4 * 8
		var buf bytes.Buffer
		groth_proof.WriteRawTo(&buf)
		proofBytes := buf.Bytes()

		// solidity contract inputs
		var (
			a     [2]*big.Int
			b     [2][2]*big.Int
			c     [2]*big.Int
		)

		// proof.Ar, proof.Bs, proof.Krs
		a[0] = new(big.Int).SetBytes(proofBytes[fpSize*0 : fpSize*1])
		a[1] = new(big.Int).SetBytes(proofBytes[fpSize*1 : fpSize*2])
		b[0][0] = new(big.Int).SetBytes(proofBytes[fpSize*2 : fpSize*3])
		b[0][1] = new(big.Int).SetBytes(proofBytes[fpSize*3 : fpSize*4])
		b[1][0] = new(big.Int).SetBytes(proofBytes[fpSize*4 : fpSize*5])
		b[1][1] = new(big.Int).SetBytes(proofBytes[fpSize*5 : fpSize*6])
		c[0] = new(big.Int).SetBytes(proofBytes[fpSize*6 : fpSize*7])
		c[1] = new(big.Int).SetBytes(proofBytes[fpSize*7 : fpSize*8])

		f, err := os.Create(ProtocolName + ".proof")

		if err != nil {
			fmt.Printf("Prove writing err: %v\n", err)
		}

		mw := io.MultiWriter(os.Stdout, f)
		fmt.Fprintf(mw, "%v\n", a)
		fmt.Fprintf(mw, "%v\n", b)
		fmt.Fprintf(mw, "%v\n", c)
	}

    // verify the proof
    err = groth16.Verify(groth_proof, vk, publicWitness)
    if err != nil {
        // invalid proof
        fmt.Println("Invalid Proof")
    } else {
        fmt.Println("Valid Proof")
    }
}
